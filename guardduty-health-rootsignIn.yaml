# ==================================================================================
# CloudFormation Stack: Security Notification System
#
# Purpose:
#   Creates a centralized alerting system for:
#   - AWS GuardDuty security findings
#   - AWS Health Dashboard events
#   - Root user sign-in attempts
#
# Architecture:
#   1. EventBridge Rules detect security events
#   2. SNS Topic acts as a fan-out mechanism
#   3. Multiple subscription endpoints (Email, SMS, Slack)
#   4. Optional Lambda for advanced Slack message formatting
#
# Deployment Notes:
#   - Designed for organization-wide deployment via StackSets
#   - Requires confirmation of email/SMS subscriptions post-deployment
#   - Slack integration requires webhook URL configuration
# ==================================================================================

AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Centralized security notifications for GuardDuty, AWS Health, and root user activities
  across all organization accounts and regions.

Parameters:
  # --------------------------------------------------------------------------------
  # Deployment Configuration Parameters
  # --------------------------------------------------------------------------------
  Region:
    Type: String
    Description: Primary AWS region for resource deployment
    Default: us-east-1  # Recommended for organization-wide deployments
    ConstraintDescription: Must be a valid AWS region code

  # --------------------------------------------------------------------------------
  # Notification Destination Parameters
  # --------------------------------------------------------------------------------
  NotificationEmail:
    Type: String
    Description: Email address for security alerts (will require confirmation)
    AllowedPattern: ^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$
    ConstraintDescription: Must be a valid email address format

  NotificationPhone:
    Type: String
    Description: E.164 formatted phone number for SMS alerts (e.g., +12065551234)
    AllowedPattern: ^\+[1-9]\d{1,14}$
    ConstraintDescription: Must be in E.164 format (e.g., +12065551234)

  SlackWebhookURL:
    Type: String
    Description: Slack incoming webhook URL for formatted alerts (optional)
    Default: ""  # Empty string disables Slack integration
    NoEcho: true  # Masks value in AWS Console/CLI
    AllowedPattern: ^$|^https:\/\/hooks\.slack\.com\/services\/.*
    ConstraintDescription: Must be a valid Slack webhook URL or empty

Resources:
  # =================================================================================
  # Core Notification Infrastructure
  # =================================================================================
  GuardDutyHealthSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub iv-edd-${AWS::AccountId}-guardduty-health-notifications-${AWS::Region}
      KmsMasterKeyId: alias/aws/sns  # Uses AWS-managed KMS key for encryption
      Tags:
        - Key: ManagedBy
          Value: CloudFormation
        - Key: Purpose
          Value: SecurityNotifications

  # =================================================================================
  # Notification Subscriptions
  # =================================================================================
  GuardDutyHealthSNSSubscriptionEmail:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email  # Will send confirmation email to recipient
      Endpoint: !Ref NotificationEmail
      TopicArn: !Ref GuardDutyHealthSNSTopic
      # Note: Recipient must confirm subscription before receiving alerts

  GuardDutyHealthSNSSubscriptionSMS:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sms  # SMS text messages
      Endpoint: !Ref NotificationPhone
      TopicArn: !Ref GuardDutyHealthSNSTopic
      # Note: AWS charges may apply for SMS notifications

  # Basic Slack integration (no formatting)
  GuardDutyHealthSNSSubscriptionSlack:
    Type: AWS::SNS::Subscription
    Condition: HasSlackWebhook
    Properties:
      Protocol: https  # Direct webhook integration
      Endpoint: !Ref SlackWebhookURL
      TopicArn: !Ref GuardDutyHealthSNSTopic

  # =================================================================================
  # Advanced Slack Processing (Recommended)
  # =================================================================================
  SlackNotificationLambda:
    Type: AWS::SNS::Subscription
    Condition: HasSlackWebhook
    Properties:
      FunctionName: !Sub iv-edd-${AWS::AccountId}-SlackNotificationFormatter-${AWS::Region}
      Description: Transforms SNS notifications into rich Slack messages
      Runtime: python3.9
      Handler: index.lambda_handler
      MemorySize: 128  # MB - sufficient for Slack API calls
      Timeout: 10  # Seconds - should complete well under this limit
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          SlackWebhookURL: !Ref SlackWebhookURL  # Injected as environment variable
      Code:
        ZipFile: |
          # Python implementation handles:
          # - Message parsing from SNS
          # - Rich Slack message formatting
          # - Error handling and retries
          import json
          import urllib3
          import os

          def lambda_handler(event, context):
              try:
                  http = urllib3.PoolManager()
                  slack_webhook_url = os.environ['SlackWebhookURL']
                  
                  # Parse SNS message (may contain GuardDuty/Health/RootLogin events)
                  sns_message = json.loads(event['Records'][0]['Sns']['Message'])
                  
                  # Construct rich Slack message with attachments
                  slack_message = {
                      "text": "*AWS Security Alert*",
                      "attachments": [{
                          "color": "#ff0000",  # Red for high priority
                          "fields": [
                              {"title": "Account", "value": event['Records'][0]['Sns']['TopicArn'].split(':')[4], "short": True},
                              {"title": "Region", "value": event['Records'][0]['Sns']['TopicArn'].split(':')[3], "short": True},
                              {"title": "Alert Type", "value": sns_message.get('detail-type', 'Unknown'), "short": False},
                              {"title": "Details", "value": json.dumps(sns_message.get('detail', {}), indent=2), "short": False}
                          ]
                      }]
                  }
                  
                  # Post to Slack webhook
                  response = http.request(
                      'POST',
                      slack_webhook_url,
                      body=json.dumps(slack_message),
                      headers={'Content-Type': 'application/json'}
                  )
                  
                  return {"statusCode": response.status}
                  
              except Exception as e:
                  # Log errors to CloudWatch for troubleshooting
                  return {
                      "statusCode": 500,
                      "body": f"Error processing alert: {str(e)}"
                  }

  # IAM Role for Lambda execution
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Condition: HasSlackWebhook
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole  # For CloudWatch logging

  # Permission for SNS to invoke Lambda
  LambdaSubscriptionPermission:
    Type: AWS::Lambda::Permission
    Condition: HasSlackWebhook
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt SlackNotificationLambda.Arn
      Principal: sns.amazonaws.com  # Allow SNS service to trigger
      SourceArn: !Ref GuardDutyHealthSNSTopic  # Restrict to our SNS topic

  # Lambda-based Slack subscription (replaces basic HTTPS subscription)
  GuardDutyHealthSNSSubscriptionLambda:
    Type: AWS::SNS::Subscription
    Condition: HasSlackWebhook
    Properties:
      Protocol: lambda  # Uses Lambda instead of direct HTTPS
      Endpoint: !GetAtt SlackNotificationLambda.Arn
      TopicArn: !Ref GuardDutyHealthSNSTopic

  # =================================================================================
  # Event Detection Rules
  # =================================================================================
  GuardDutyFindingRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub iv-edd-${AWS::AccountId}-GuardDutyFindingToSNS-${AWS::Region}
      Description: "Captures all GuardDuty security findings"
      EventPattern:
        source: ["aws.guardduty"]
        detail-type: ["GuardDuty Finding"]
        # No additional filtering - captures all severity levels
      Targets:
        - Id: GuardDutySNSTarget
          Arn: !Ref GuardDutyHealthSNSTopic

  HealthDashboardRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub iv-edd-${AWS::AccountId}-HealthDashboardToSNS-${AWS::Region}
      Description: "Captures all AWS Health events"
      EventPattern:
        source: ["aws.health"]  # All health events regardless of service
      Targets:
        - Id: HealthSNSTarget
          Arn: !Ref GuardDutyHealthSNSTopic

  RootUserSignInRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub iv-edd-${AWS::AccountId}-RootUserSignInToSNS-${AWS::Region}
      Description: "Detects console logins by root user"
      EventPattern:
        source: ["aws.signin"]
        detail-type: ["AWS Console Sign In via CloudTrail"]
        detail:
          userIdentity:
            type: ["Root"]  # Specifically targets root user
          eventName: ["ConsoleLogin"]  # Only interactive logins
      Targets:
        - Id: RootUserSignInSNSTarget
          Arn: !Ref GuardDutyHealthSNSTopic

  # =================================================================================
  # Security Policies
  # =================================================================================
  SNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics: [!Ref GuardDutyHealthSNSTopic]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com  # Allow EventBridge to publish
            Action: "sns:Publish"
            Resource: !Ref GuardDutyHealthSNSTopic
            # No conditions - needed for all EventBridge rules

Conditions:
  # --------------------------------------------------------------------------------
  # Conditional Logic
  # --------------------------------------------------------------------------------
  # Only create Slack-related resources if webhook URL is provided
  HasSlackWebhook: !Not [!Equals [!Ref SlackWebhookURL, ""]]

Outputs:
  # --------------------------------------------------------------------------------
  # Deployment Outputs
  # --------------------------------------------------------------------------------
  SNSTopicArn:
    Description: ARN of the central SNS notification topic
    Value: !Ref GuardDutyHealthSNSTopic
    Export:
      Name: !Sub ${AWS::StackName}-NotificationTopic

  DeploymentRegion:
    Description: Primary deployment region for reference
    Value: !Ref Region

  SlackNotificationLambdaArn:
    Condition: HasSlackWebhook
    Description: ARN of the Slack formatting Lambda (if deployed)
    Value: !GetAtt SlackNotificationLambda.Arn
    Export:
      Name: !Sub ${AWS::StackName}-SlackLambda