# ==================================================================================
# CloudFormation Stack: GuardDuty, Health Dashboard, and Root User Sign-In Alerts
# 
# Purpose:
#   Centralized security notifications for:
#   - GuardDuty findings
#   - AWS Health Dashboard events
#   - Root user sign-in attempts
#
# Deployment:
#   1. Deploy as StackSet to all organization accounts
#   2. Provide notification parameters:
#      - Email address
#      - SMS number (E.164 format)
#      - Slack webhook URL (optional)
#   3. Confirm SNS subscriptions after deployment
# ==================================================================================

AWSTemplateFormatVersion: '2010-09-09'
Description: >
  EventBridge rules and SNS topic for security notifications across organization accounts.

Parameters:
  Region:
    Type: String
    Description: Primary deployment region
    Default: us-east-1
    AllowedValues: [us-east-1, us-west-2, eu-west-1]  # Add other regions as needed

  NotificationEmail:
    Type: String
    Description: Email for security alerts
    AllowedPattern: ^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$

  NotificationPhone:
    Type: String
    Description: SMS number (E.164 format: +1234567890)
    AllowedPattern: ^\+[1-9]\d{1,14}$

  SlackWebhookURL:
    Type: String
    Description: Slack incoming webhook URL
    Default: ""
    NoEcho: true
    AllowedPattern: ^$|^https:\/\/hooks\.slack\.com\/services\/.*

Resources:
  # ==============================
  # Notification Infrastructure
  # ==============================
  GuardDutyHealthSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub iv-edd-${AWS::AccountId}-guardduty-health-notifications-${AWS::Region}
      KmsMasterKeyId: alias/aws/sns
      Tags:
        - Key: Purpose
          Value: SecurityNotifications

  # ==============================
  # Notification Subscriptions
  # ==============================
  GuardDutyHealthSNSSubscriptionEmail:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      Endpoint: !Ref NotificationEmail
      TopicArn: !Ref GuardDutyHealthSNSTopic

  GuardDutyHealthSNSSubscriptionSMS:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sms
      Endpoint: !Ref NotificationPhone
      TopicArn: !Ref GuardDutyHealthSNSTopic

  GuardDutyHealthSNSSubscriptionSlack:
    Type: AWS::SNS::Subscription
    Condition: HasSlackWebhook
    Properties:
      Protocol: https
      Endpoint: !Ref SlackWebhookURL
      TopicArn: !Ref GuardDutyHealthSNSTopic

  # ==============================
  # Slack Notification Processor
  # ==============================
  SlackNotificationLambda:
    Type: AWS::Lambda::Function
    Condition: HasSlackWebhook
    Properties:
      FunctionName: !Sub iv-edd-${AWS::AccountId}-SlackNotificationFormatter-${AWS::Region}
      Description: Formats SNS notifications for Slack
      Runtime: python3.9
      Handler: index.lambda_handler
      MemorySize: 128
      Timeout: 10
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          SlackWebhookURL: !Ref SlackWebhookURL
      Code:
        ZipFile: |
          import json
          import urllib3
          import os

          def lambda_handler(event, context):
              try:
                  http = urllib3.PoolManager()
                  slack_webhook_url = os.environ['SlackWebhookURL']
                  
                  sns_message = json.loads(event['Records'][0]['Sns']['Message'])
                  
                  slack_message = {
                      "text": "*AWS Security Alert*",
                      "attachments": [{
                          "color": "#ff0000",
                          "fields": [
                              {"title": "Account", "value": event['Records'][0]['Sns']['TopicArn'].split(':')[4], "short": True},
                              {"title": "Region", "value": event['Records'][0]['Sns']['TopicArn'].split(':')[3], "short": True},
                              {"title": "Alert Type", "value": sns_message.get('detail-type', 'Unknown'), "short": False},
                              {"title": "Details", "value": json.dumps(sns_message.get('detail', {}), indent=2), "short": False}
                          ]
                      }]
                  }
                  
                  response = http.request(
                      'POST',
                      slack_webhook_url,
                      body=json.dumps(slack_message),
                      headers={'Content-Type': 'application/json'}
                  )
                  
                  return {"statusCode": response.status}
                  
              except Exception as e:
                  return {
                      "statusCode": 500,
                      "body": f"Error processing alert: {str(e)}"
                  }

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Condition: HasSlackWebhook
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: {Service: lambda.amazonaws.com}
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  LambdaSubscriptionPermission:
    Type: AWS::Lambda::Permission
    Condition: HasSlackWebhook
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt SlackNotificationLambda.Arn
      Principal: sns.amazonaws.com
      SourceArn: !Ref GuardDutyHealthSNSTopic

  GuardDutyHealthSNSSubscriptionLambda:
    Type: AWS::SNS::Subscription
    Condition: HasSlackWebhook
    Properties:
      Protocol: lambda
      Endpoint: !GetAtt SlackNotificationLambda.Arn
      TopicArn: !Ref GuardDutyHealthSNSTopic

  # ==============================
  # Event Monitoring Rules
  # ==============================
  GuardDutyFindingRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub iv-edd-${AWS::AccountId}-GuardDutyFindingToSNS-${AWS::Region}
      Description: Forward GuardDuty findings to SNS
      EventPattern:
        source: ["aws.guardduty"]
        detail-type: ["GuardDuty Finding"]
      Targets:
        - Id: GuardDutySNSTarget
          Arn: !Ref GuardDutyHealthSNSTopic

  HealthDashboardRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub iv-edd-${AWS::AccountId}-HealthDashboardToSNS-${AWS::Region}
      Description: Forward AWS Health events to SNS
      EventPattern:
        source: ["aws.health"]
      Targets:
        - Id: HealthSNSTarget
          Arn: !Ref GuardDutyHealthSNSTopic

  RootUserSignInRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub iv-edd-${AWS::AccountId}-RootUserSignInToSNS-${AWS::Region}
      Description: Alert on root user console logins
      EventPattern:
        source: ["aws.signin"]
        detail-type: ["AWS Console Sign In via CloudTrail"]
        detail:
          userIdentity:
            type: ["Root"]
          eventName: ["ConsoleLogin"]
      Targets:
        - Id: RootUserSignInSNSTarget
          Arn: !Ref GuardDutyHealthSNSTopic

  # ==============================
  # Security Configuration
  # ==============================
  SNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics: [!Ref GuardDutyHealthSNSTopic]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: {Service: events.amazonaws.com}
            Action: "sns:Publish"
            Resource: !Ref GuardDutyHealthSNSTopic

Conditions:
  HasSlackWebhook: !Not [!Equals [!Ref SlackWebhookURL, ""]]

Outputs:
  SNSTopicARN:
    Description: ARN of the security notifications topic
    Value: !Ref GuardDutyHealthSNSTopic
    Export:
      Name: !Sub ${AWS::StackName}-SNSTopicARN

  SlackLambdaARN:
    Condition: HasSlackWebhook
    Description: ARN of the Slack formatter Lambda
    Value: !GetAtt SlackNotificationLambda.Arn
    Export:
      Name: !Sub ${AWS::StackName}-SlackLambdaARN